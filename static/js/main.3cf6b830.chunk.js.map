{"version":3,"sources":["Components/SearchField.js","Components/SearchResult.js","Components/Gallery/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["SearchField","state","searchInputText","fetchImages","flickrSearchURL","console","log","fetch","then","response","json","props","setImages","photos","photo","style","type","value","this","onChange","e","setState","target","onKeyPress","key","onClick","React","Component","position","top","display","backgroundColor","padding","boxShadow","SearchResult","toggleSelectedImage","newGalleryImages","classList","contains","remove","galleryImages","filter","image","src","add","setGalleryImages","images","map","imageSrc","farm","server","id","secret","className","alt","title","height","background","gridTemplateColumns","Gallery","displayedImageIndex","deleteImgGallery","imgSrc","document","querySelector","displayNextImage","length","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3cf6b830.chunk.js","sourcesContent":["import React from \"react\";\n\nclass SearchField extends React.Component {\n  state = {\n    searchInputText: \"\",\n  };\n\n  fetchImages = () => {\n    const flickrSearchURL = `https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=b54580f369a7eeebecb2004dc429d08f&format=json&nojsoncallback=1&text=${this.state.searchInputText}`;\n    console.log(flickrSearchURL);\n    fetch(flickrSearchURL)\n      .then((response) => {\n        return response.json();\n      })\n      .then((response) => {\n        this.props.setImages(response.photos.photo);\n      });\n  };\n\n  render() {\n    return (\n      <div style={style}>\n        <input\n          type=\"text\"\n          value={this.state.searchInputText}\n          onChange={(e) => {\n            this.setState({ searchInputText: e.target.value });\n          }}\n          onKeyPress={(e) => {\n            if (e.key === \"Enter\") {\n              this.fetchImages();\n              this.setState({ searchInputText: \"\" });\n            }\n          }}\n        ></input>\n        <button onClick={this.fetchImages}>Search</button>\n        <button>Show gallery</button>\n      </div>\n    );\n  }\n}\n\nconst style = {\n  position: \"sticky\",\n  top: 0,\n  display: \"flex\",\n  backgroundColor: \"#92bfce\",\n  padding: \"10px 0\",\n  boxShadow: \"0 40px 60px 0 rgba(18, 64, 86, 0.75)\",\n};\n\nexport default SearchField;\n","import React from \"react\";\nimport \"./SearchResult.css\";\n\nclass SearchResult extends React.Component {\n  toggleSelectedImage = (e) => {\n    let newGalleryImages = [];\n    if (e.target.classList.contains(\"selected\")) {\n      // remove from gallery\n      e.target.classList.remove(\"selected\");\n      newGalleryImages = this.props.galleryImages.filter(\n        (image) => image !== e.target.src\n      );\n    } else {\n      // Add to gallery\n      newGalleryImages = [...this.props.galleryImages, e.target.src];\n      e.target.classList.add(\"selected\");\n    }\n\n    this.props.setGalleryImages(newGalleryImages);\n  };\n\n  render() {\n    return (\n      <div style={style}>\n        {this.props.images.map((image) => {\n          // https://farm66.staticflickr.com/65535/50351909646_92c613b432_m.jpg\n          const imageSrc = `https://farm${image.farm}.staticflickr.com/${image.server}/${image.id}_${image.secret}_m.jpg`;\n          return (\n            <img\n              className=\"SearchResultImage\"\n              onClick={this.toggleSelectedImage}\n              key={image.id}\n              src={imageSrc}\n              alt={image.title}\n            ></img>\n          );\n        })}\n      </div>\n    );\n  }\n}\nconst style = {\n  height: \"100%\",\n  display: \"grid\",\n  background: \"lightgrey\",\n  gridTemplateColumns: \"repeat(4, 1fr)\",\n};\nexport default SearchResult;\n","import React from \"react\";\n\nclass Gallery extends React.Component {\n  state = {\n    displayedImageIndex: 0,\n  };\n  deleteImgGallery = (e) => {\n    let imgSrc = document.querySelector(\".img-gallery\").src;\n    let newGalleryImages = this.props.images.filter(\n      (image) => image !== imgSrc\n    );\n    this.props.setGalleryImages(newGalleryImages);\n  };\n\n  displayNextImage = () => {\n    if (this.state.displayedImageIndex === this.props.images.length - 1) {\n      this.setState({ displayedImageIndex: 0 });\n    } else {\n      this.setState({ displayedImageIndex: ++this.state.displayedImageIndex });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"Gallery\">\n        <button onClick={this.deleteImgGallery}>Delete image</button>\n        <img\n          className=\"img-gallery\"\n          alt=\"\"\n          src={this.props.images[this.state.displayedImageIndex]}\n          onClick={this.displayNextImage}\n        ></img>\n      </div>\n    );\n  }\n}\n\nexport default Gallery;\n","import React, { useState } from \"react\";\nimport SearchField from \"./Components/SearchField\";\nimport SearchResult from \"./Components/SearchResult\";\nimport Gallery from \"./Components/Gallery/Gallery\";\nimport \"./App.css\";\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [galleryImages, setGalleryImages] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <Gallery images={galleryImages} setGalleryImages={setGalleryImages} />\n      <SearchField setImages={setImages} />\n      <SearchResult\n        images={images}\n        setGalleryImages={setGalleryImages}\n        galleryImages={galleryImages}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}